// Imports the Amplify library from 'aws-amplify' package. This is used to configure your app to interact with AWS services.
import { Amplify } from "aws-amplify";
import { fetchAuthSession } from "@aws-amplify/auth";

// Imports the Authenticator and withAuthenticator components from '@aws-amplify/ui-react'.
// Authenticator is a React component that provides a ready-to-use sign-in and sign-up UI.
// withAuthenticator is a higher-order component that wraps your app component to enforce authentication.
import { Authenticator, withAuthenticator } from "@aws-amplify/ui-react";

// Imports the default styles for the Amplify UI components. This line ensures that the authenticator looks nice out of the box.
import "@aws-amplify/ui-react/styles.css";

// Imports the awsExports configuration file generated by the Amplify CLI. This file contains the AWS service configurations (like Cognito, AppSync, etc.) specific to your project.
import awsExports from "./aws-exports.ts";

// Configures the Amplify library with the settings from aws-exports.js, which includes all the AWS service configurations for this project.
Amplify.configure(awsExports);

const getJwtToken = async () => {
  try {
    const cognitoTokens = await fetchAuthSession();
    const rawToken = cognitoTokens?.tokens?.idToken?.toString();

    if (!rawToken) {
      throw new Error("JWT token is undefined");
    }

    return rawToken;
  } catch (e) {
    console.error("Error fetching JWT token:", e);
  }
};

async function fetchProtectedData() {
  try {
    const token = await getJwtToken();
    console.log("JWT Token:", token);
    if (!token) {
      throw new Error("Unable to retrieve JWT token");
    }

    const response = await fetch("http://localhost:8000/jwt/protected", {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("Response:", response);

    if (!response.ok) {
      throw new Error(`Failed to fetch protected data: ${response.statusText}`);
    }

    const data = await response.json();
    console.log("Protected data:", data);
  } catch (error) {
    console.error("Error fetching protected data:", error);
  }
}

fetchProtectedData();


export function Login() {
  return (
    <div className="App">
      <Authenticator>
        {({ signOut }) => (
          <main>
            <header className="App-header">
              <button
                onClick={signOut}
                style={{
                  margin: "20px",
                  fontSize: "0.8rem",
                  padding: "5px 10px",
                  marginTop: "20px",
                }}
              >
                Sign Out
              </button>
            </header>
          </main>
        )}
      </Authenticator>
    </div>
  );
}

const AppWithAuth = withAuthenticator(Login);
export default AppWithAuth;
